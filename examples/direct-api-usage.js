#!/usr/bin/env node

/**
 * Direct API Usage Example
 *
 * This script demonstrates how to interact with Paseo Core directly
 * using standard HTTP requests - no SDK required!
 *
 * Set these environment variables first:
 *   export PASEO_ENDPOINT="https://your-worker.workers.dev"
 *   export PASEO_POD_NAME="your-pod-name"  (optional - will create one if not set)
 *   export PASEO_ACTOR_ID="your-actor-id"  (optional - will create one if not set)
 */

// Use fetch polyfill for Node.js versions that don't have it built-in
let fetch;
try {
	fetch = globalThis.fetch;
	if (!fetch) {
		fetch = require('node-fetch');
	}
} catch (e) {
	console.error('‚ùå fetch not available. Install node-fetch: npm install node-fetch');
	process.exit(1);
}

const PASEO_ENDPOINT = process.env.PASEO_ENDPOINT;
let POD_NAME = process.env.PASEO_POD_NAME;
let ACTOR_ID = process.env.PASEO_ACTOR_ID;

if (!PASEO_ENDPOINT) {
	console.error('‚ùå Please set PASEO_ENDPOINT environment variable');
	console.log('   Example: export PASEO_ENDPOINT="https://your-worker.workers.dev"');
	process.exit(1);
}

async function main() {
	try {
		console.log(`üöÄ Using Paseo Core at: ${PASEO_ENDPOINT}`);
		console.log('');

		// 1. Create a pod if we don't have one
		if (!POD_NAME) {
			console.log('üì¶ Creating a new pod...');
			const podResponse = await fetch(`${PASEO_ENDPOINT}/pods`, {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
			});

			if (!podResponse.ok) {
				throw new Error(`Pod creation failed: ${podResponse.status} ${podResponse.statusText}`);
			}

			const podData = await podResponse.json();
			POD_NAME = podData.podName;
			console.log(`‚úÖ Pod created: ${POD_NAME}`);
		} else {
			console.log(`üì¶ Using existing pod: ${POD_NAME}`);
		}

		// 2. Create a store actor if we don't have one
		if (!ACTOR_ID) {
			console.log('üé≠ Creating a store actor...');
			const actorConfig = {
				config: {
					actorType: 'store',
					version: 'v1',
					schema: {
						type: 'object',
						properties: {
							id: { type: 'string' },
							data: { type: 'object' },
							tags: { type: 'array', items: { type: 'string' } },
						},
						required: ['id'],
					},
					indexes: ['id', 'data.type'],
				},
			};

			const actorResponse = await fetch(`${PASEO_ENDPOINT}/pods/${POD_NAME}/actors`, {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(actorConfig),
			});

			if (!actorResponse.ok) {
				throw new Error(`Actor creation failed: ${actorResponse.status} ${actorResponse.statusText}`);
			}

			const actorData = await actorResponse.json();
			ACTOR_ID = actorData.actorId;
			console.log(`‚úÖ Actor created: ${ACTOR_ID}`);
			console.log(`üìã OpenAPI spec: ${actorData.openapi}`);
		} else {
			console.log(`üé≠ Using existing actor: ${ACTOR_ID}`);
		}

		const STORE_BASE_URL = `${PASEO_ENDPOINT}/pods/${POD_NAME}/actors/${ACTOR_ID}`;
		console.log(`üìç Store URL: ${STORE_BASE_URL}`);
		console.log('');

		// 3. Store some sample items
		console.log('üìù Storing sample items...');
		const sampleItems = [
			{
				id: 'item-1',
				data: {
					type: 'note',
					content: 'First sample item',
					timestamp: new Date().toISOString(),
				},
			},
			{
				id: 'item-2',
				data: {
					type: 'task',
					content: 'Second sample item',
					priority: 'high',
				},
			},
		];
		for (const item of sampleItems) {
			const response = await fetch(`${STORE_BASE_URL}/items`, {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(item),
			});

			if (!response.ok) {
				throw new Error(`Failed to store item ${item.id}: ${response.status} ${response.statusText}`);
			}

			const result = await response.json();
			console.log(`  ‚úÖ Stored ${item.id} (${result.id})`);
		}

		// 4. List all items
		console.log('');
		console.log('üìÑ Listing all items...');
		const listResponse = await fetch(`${STORE_BASE_URL}/items`);
		if (!listResponse.ok) {
			throw new Error(`Failed to list items: ${listResponse.status} ${listResponse.statusText}`);
		}

		const listData = await listResponse.json();
		console.log(`Found ${listData.items.length} items:`);
		listData.items.forEach((item) => {
			console.log(`  - ${item.id}: ${JSON.stringify(item.body.data).substring(0, 50)}...`);
		});

		// 5. Get a specific item (use the generated ID from the first stored item)
		console.log('');
		console.log('üîç Fetching specific item...');
		const firstItemId = listData.items[0].id; // Use the UUID generated by the system
		const itemResponse = await fetch(`${STORE_BASE_URL}/items/${firstItemId}`);
		if (!itemResponse.ok) {
			throw new Error(`Failed to get item: ${itemResponse.status} ${itemResponse.statusText}`);
		}

		const itemData = await itemResponse.json();
		console.log('Retrieved item:', JSON.stringify(itemData, null, 2)); // 6. Filter by indexed field (if supported)
		console.log('');
		console.log('üîç Filtering items by type...');
		const filterResponse = await fetch(`${STORE_BASE_URL}/items?k_data_type=note`);
		if (filterResponse.ok) {
			const filterData = await filterResponse.json();
			console.log(`Found ${filterData.items.length} notes:`);
			filterData.items.forEach((item) => {
				console.log(`  - ${item.id}: ${item.body.data.content}`);
			});
		} else {
			console.log('  (Filtering not available or different syntax)');
		}

		console.log('');
		console.log('üéâ Demo completed successfully!');
		console.log('');
		console.log('üí° Next steps:');
		console.log(`   - View OpenAPI spec: curl ${STORE_BASE_URL}/openapi.json`);
		console.log(
			`   - Add more items: curl -X POST ${STORE_BASE_URL}/items -H "Content-Type: application/json" -d '{"id":"new-item","data":{}}'`
		);
		console.log(`   - List items: curl ${STORE_BASE_URL}/items`);
		console.log('');
		console.log('üîß Environment variables for reuse:');
		console.log(`   export PASEO_ENDPOINT="${PASEO_ENDPOINT}"`);
		console.log(`   export PASEO_POD_NAME="${POD_NAME}"`);
		console.log(`   export PASEO_ACTOR_ID="${ACTOR_ID}"`);
	} catch (error) {
		console.error('‚ùå Error:', error.message);
		process.exit(1);
	}
}

main();
